# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
version: 2.1

# Use circleci orbs for easy use
orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
 
jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies- 
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint


#
# Maybe try remote docker later, need to manually copy files
#
#  docker_stuff:
#    docker:
#      - image: python:3.7.3-stretch  
#    working_directory: ~/app
#    resource_class: small       
#    steps:
#      - checkout
#      - setup_remote_docker:
#          version: 19.03.13
#      - run:
#          name: Build docker image and upload
#          command: |
#            docker login -u networkingcat -p ${DOCKER_PWD}
#            docker build -t networkingcat/hello_world:${CIRCLE_BUILD_NUM} .
#            docker push networkingcat/hello_world:${CIRCLE_BUILD_NUM}
#            docker tag networkingcat/hello_world:${CIRCLE_BUILD_NUM} networkingcat/hello_world:latest
#            docker push networkingcat/hello_world:latest



  docker_stuff:
    machine: true
    working_directory: ~/app
    resource_class: medium       
    steps:
      - checkout
      - run:
          name: Build docker image and upload
          command: |
            # unsecure, do not use
            # docker login -u networkingcat -p ${DOCKER_PASSWORD}
            echo $DOCKER_PASSWORD | docker login -u networkingcat --password-stdin
            docker build -t networkingcat/hello_world:${CIRCLE_BUILD_NUM} .
            docker push networkingcat/hello_world:${CIRCLE_BUILD_NUM}
            docker tag networkingcat/hello_world:${CIRCLE_BUILD_NUM} networkingcat/hello_world:latest
            docker push networkingcat/hello_world:latest

  create_eks:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of Cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "eu-central-1"        
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "deployment/demo-app-deployment.yaml"
          resource-name: deployment/demoapp
          aws-region: << parameters.aws-region >>


workflows:
  deployment:
    jobs:
      #- build
      #- docker_stuff:
      #    requires: [build]   
      - aws-eks/create-cluster:
          cluster-name: forward-thomas-eks-cluster
          aws-region: eu-central-1
